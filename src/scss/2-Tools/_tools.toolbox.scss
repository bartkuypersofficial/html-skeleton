// =============================================================
// Toolbox
// =============================================================
// sass-lint:disable function-name-format


// Functions
// =============================================================

//Value to rem
@function valueToRem($value) {
  $no-units: strip-unit($value);
  @return #{calc($no-units / 16 * 1rem)};
}


// Value to em
@function valueToEm($value) {
  $no-units: strip-unit($value);
  @return #{calc($no-units / 16 * 1em)};
}



// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return calc($number / ($number * 0 + 1));
  }

  @return $number;
}

        


// Mixins
// =============================================================


// Mixin for setting a font-family

// USAGE:
//
// .myClass {
//   @include font-family(default, thin);
// }
@mixin font-family($font-type, $font-style: 'base') {
  font-family: map-get(map-get($font-types, $font-type), $font-style);
}


// Mixin for setting font-size in PX and REM

// USAGE:
//
// .myClass {
//   @include font-size('x-large');
// }
@mixin font-size($size) {
  $font-size-properties: map-get($font-sizes, $size);

  @if $font-size-properties {
    @include font-size(map-get($font-size-properties, font-size));
  } @else {
    font-size: #{$size}px;
    font-size: valueToRem($size); // sass-lint:disable-line no-duplicate-properties
  }
}


// Font mixin for setting font-size, 
// font-family, line-height and font-weight

// USAGE:
//
// .myClass {
//   @include font('default', 'base', $bold:true);
// }
@mixin font($font-size, $font-type, $font-style: 'base') {
  $font-size-properties: map-get($font-sizes, $font-size);
   
  @include font-size($font-size);
  @include font-family($font-type, $font-style);

  line-height: map-get($font-size-properties, line-height);
}


// Truncate overly long strings
// sample value truncate(100%)
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}


// Show hyphens for every browser supporting it 
// and will break lines in every other browser
@mixin hyphenate {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}


// Can be used to make text unselectable    
@mixin no-select() {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}


// Handling Long Words and URLs 
// (Forcing Breaks, Hyphenation, Ellipsis, etc)
// https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/

@mixin word-wrap() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all; // sass-lint:disable-line no-misspelled-properties
  word-break: break-word;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}

@mixin ellipsis() {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}



// Extra helper tools
// =============================================================


// Micro clearfix
// As per: nicolasgallagher.com/micro-clearfix-hack
@mixin cf() {
  &::after {
    display: block;
    clear: both;
    content: '';
  }
}


// Reset Lobotomized Owl selector for 
// all ancesctors in a component
@mixin reset-owl() {
  & * + * {
    margin-top: 0;
  }
}


// Reset Lobotomized Owl selector for 
// all direct children in a component
@mixin reset-owl-children() {
  & > * {
    margin-top: 0;
  }
}


// Quickly reset lists
@mixin resetlist { 
  margin-left: 0;
  list-style: none;
}


// Make a circle
@mixin circle {
  border-radius: 50%;
}


// Give some rounded corners
@mixin rounded {
  border-radius: $border-radius;
}


// Adding a border
//
// When no arguments are passed it gets the default border on all sides
// Specifying side(s) is possible by including a 'space-seperated' list
// Overwriting default border style with '$style' argument

// USAGE:
//
// @include border();
// @include border(bottom left);
// @include border($style: 3px dotted #383838);
// @include border(top right, $style: 2px solid #ff0000);
@mixin border ($sides: null, $style: $border-width $border-style $border-color) {
  @if ($sides == null) {
    border: $style;
  } @else {
    @each $side in $sides {
      @if ($side == 'top' or $side == 'right' or $side == 'bottom' or $side == 'left') {
        border-#{$side}: $style;
      }
    }
  }
}


// Mixin for greating a constrain around a container 
// with sets a maximum width and creates white space around
// To be used for containing elements
@mixin constrain() {
  max-width: calc(#{$mq-xl} + (#{$site-gutter-width} * 2));
  margin-right: $site-gutter-width-mobile;
  margin-left: $site-gutter-width-mobile;

  @include media-query(m) {
    margin-right: auto;
    margin-left: auto;
    padding: 0 $site-gutter-width;
  }
}

// sass-lint:enable function-name-format